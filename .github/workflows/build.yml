name: go container apps
on:
  push: {}
  release: {}
  workflow_dispatch: {}
permissions:
  contents: read
  id-token: write
  packages: write
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: configure system
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
          gh auth status
      - uses: sigstore/cosign-installer@1aa8e0f2454b781fbf0fbf306a4c9533a0c57409 # v3.7.0
      - uses: chainguard-dev/actions/setup-gitsign@5abab7fb71a583802343c1b2a14e6a29b79323b8 # main
      - id: run-info
        name: collect job run info
        env:
          KO_DOCKER_REPO: ghcr.io/${{ github.repository }}
        run: |
          echo "ko-docker-repo=${KO_DOCKER_REPO,,}" >> $GITHUB_OUTPUT
          PATHS="$(go list -json ./... | jq -r -s '.[] | select (.Name == "main") | .ImportPath' | xargs)"
          echo "paths="$PATHS"" >> $GITHUB_OUTPUT
      - uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
          check-latest: true
      - uses: ko-build/setup-ko@3aebd0597dc1e9d1a26bcfdb7cbeb19c131d3037 # v0.7
      - uses: imjasonh/setup-crane@31b88efe9de28ae0ffa220711af4b60be9435f6e # v0.4
      - id: build
        env:
          KO_DOCKER_REPO: ${{ steps.run-info.outputs.ko-docker-repo }}
          IMAGES_PATH: ${{ steps.run-info.outputs.paths }}
        run: |
          IMAGES="$(ko build --push=true --base-import-paths $IMAGES_PATH)"
          echo "images=$(echo $IMAGES | tr ' ' ',')" >> $GITHUB_OUTPUT
      - id: sign-images-and-attest-sbom
        env:
          COSIGN_YES: "true"
          IMAGE: ${{ steps.build.outputs.images }}
        run: |
          for IMAGE in $(echo ${{ steps.build.outputs.images }} | tr ',' ' '); do
            cosign sign $IMAGE -y --recursive
            cosign download sbom $IMAGE > /tmp/sbom-spdx.json
            cosign attest --predicate /tmp/sbom-spdx.json $IMAGE -y --recursive
          done
      - name: image result
        id: result
        run: |
          echo "Build, pushed and signed: $(echo ${{ steps.build.outputs.images }} | tr ',' ' ')"
